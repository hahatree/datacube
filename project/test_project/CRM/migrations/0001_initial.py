# Generated by Django 2.1.2 on 2019-01-16 13:27

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Mt5Accounts',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('currencydigits', models.PositiveIntegerField(db_column='CurrencyDigits')),
                ('balance', models.FloatField(db_column='Balance')),
                ('credit', models.FloatField(db_column='Credit')),
                ('margin', models.FloatField(db_column='Margin')),
                ('marginfree', models.FloatField(db_column='MarginFree')),
                ('marginlevel', models.FloatField(db_column='MarginLevel')),
                ('marginleverage', models.PositiveIntegerField(db_column='MarginLeverage')),
                ('margininitial', models.FloatField(db_column='MarginInitial')),
                ('marginmaintenance', models.FloatField(db_column='MarginMaintenance')),
                ('profit', models.FloatField(db_column='Profit')),
                ('storage', models.FloatField(db_column='Storage')),
                ('commission', models.FloatField(db_column='Commission')),
                ('floating', models.FloatField(db_column='Floating')),
                ('equity', models.FloatField(db_column='Equity')),
                ('assets', models.FloatField(db_column='Assets')),
                ('liabilities', models.FloatField(db_column='Liabilities')),
                ('blockedcommission', models.FloatField(db_column='BlockedCommission')),
                ('blockedprofit', models.FloatField(db_column='BlockedProfit')),
            ],
            options={
                'db_table': 'mt5_accounts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5AntiddosServers',
            fields=[
                ('server_id', models.BigIntegerField(db_column='Server_ID', primary_key=True, serialize=False)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('server', models.BigIntegerField(db_column='Server')),
            ],
            options={
                'db_table': 'mt5_antiddos_servers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5AntiddosSources',
            fields=[
                ('source_id', models.BigIntegerField(db_column='Source_ID', primary_key=True, serialize=False)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('from_field', models.CharField(db_column='From', max_length=64)),
                ('to', models.CharField(db_column='To', max_length=64)),
            ],
            options={
                'db_table': 'mt5_antiddos_sources',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Commissions',
            fields=[
                ('commission_id', models.BigIntegerField(db_column='Commission_ID', primary_key=True, serialize=False)),
                ('group_id', models.BigIntegerField(db_column='Group_ID')),
                ('name', models.CharField(db_column='Name', max_length=64)),
                ('description', models.CharField(db_column='Description', max_length=64)),
                ('path', models.CharField(db_column='Path', max_length=128)),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('moderange', models.PositiveIntegerField(db_column='ModeRange')),
                ('modecharge', models.PositiveIntegerField(db_column='ModeCharge')),
                ('turnovercurrency', models.CharField(db_column='TurnoverCurrency', max_length=16)),
                ('modeentry', models.PositiveIntegerField(db_column='ModeEntry')),
            ],
            options={
                'db_table': 'mt5_commissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5CommissionsTiers',
            fields=[
                ('tier_id', models.BigIntegerField(db_column='Tier_ID', primary_key=True, serialize=False)),
                ('commission_id', models.BigIntegerField(db_column='Commission_ID')),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('value', models.FloatField(db_column='Value')),
                ('rangefrom', models.FloatField(db_column='RangeFrom')),
                ('rangeto', models.FloatField(db_column='RangeTo')),
                ('minimal', models.FloatField(db_column='Minimal')),
                ('currency', models.CharField(db_column='Currency', max_length=16)),
            ],
            options={
                'db_table': 'mt5_commissions_tiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Daily',
            fields=[
                ('datetime', models.BigIntegerField(db_column='Datetime', primary_key=True, serialize=False)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('datetimeprev', models.BigIntegerField(db_column='DatetimePrev')),
                ('name', models.CharField(db_column='Name', max_length=128)),
                ('group', models.CharField(db_column='Group', max_length=64)),
                ('currency', models.CharField(db_column='Currency', max_length=32)),
                ('company', models.CharField(db_column='Company', max_length=64)),
                ('email', models.CharField(db_column='EMail', max_length=64)),
                ('balance', models.FloatField(db_column='Balance')),
                ('credit', models.FloatField(db_column='Credit')),
                ('interestrate', models.FloatField(db_column='InterestRate')),
                ('commissiondaily', models.FloatField(db_column='CommissionDaily')),
                ('commissionmonthly', models.FloatField(db_column='CommissionMonthly')),
                ('agentdaily', models.FloatField(db_column='AgentDaily')),
                ('agentmonthly', models.FloatField(db_column='AgentMonthly')),
                ('balanceprevday', models.FloatField(db_column='BalancePrevDay')),
                ('balanceprevmonth', models.FloatField(db_column='BalancePrevMonth')),
                ('equityprevday', models.FloatField(db_column='EquityPrevDay')),
                ('equityprevmonth', models.FloatField(db_column='EquityPrevMonth')),
                ('margin', models.FloatField(db_column='Margin')),
                ('marginfree', models.FloatField(db_column='MarginFree')),
                ('marginlevel', models.FloatField(db_column='MarginLevel')),
                ('marginleverage', models.PositiveIntegerField(db_column='MarginLeverage')),
                ('profit', models.FloatField(db_column='Profit')),
                ('profitstorage', models.FloatField(db_column='ProfitStorage')),
                ('profitcommission', models.FloatField(db_column='ProfitCommission')),
                ('profitequity', models.FloatField(db_column='ProfitEquity')),
                ('dailyprofit', models.FloatField(db_column='DailyProfit')),
                ('dailybalance', models.FloatField(db_column='DailyBalance')),
                ('dailycredit', models.FloatField(db_column='DailyCredit')),
                ('dailycharge', models.FloatField(db_column='DailyCharge')),
                ('dailycorrection', models.FloatField(db_column='DailyCorrection')),
                ('dailybonus', models.FloatField(db_column='DailyBonus')),
                ('dailystorage', models.FloatField(db_column='DailyStorage')),
                ('dailycomminstant', models.FloatField(db_column='DailyCommInstant')),
                ('dailycommround', models.FloatField(db_column='DailyCommRound')),
                ('dailyagent', models.FloatField(db_column='DailyAgent')),
                ('dailyinterest', models.FloatField(db_column='DailyInterest')),
            ],
            options={
                'db_table': 'mt5_daily',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Daily2018',
            fields=[
                ('datetime', models.BigIntegerField(db_column='Datetime', primary_key=True, serialize=False)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('datetimeprev', models.BigIntegerField(db_column='DatetimePrev')),
                ('name', models.CharField(db_column='Name', max_length=128)),
                ('group', models.CharField(db_column='Group', max_length=64)),
                ('currency', models.CharField(db_column='Currency', max_length=32)),
                ('company', models.CharField(db_column='Company', max_length=64)),
                ('email', models.CharField(db_column='EMail', max_length=64)),
                ('balance', models.FloatField(db_column='Balance')),
                ('credit', models.FloatField(db_column='Credit')),
                ('interestrate', models.FloatField(db_column='InterestRate')),
                ('commissiondaily', models.FloatField(db_column='CommissionDaily')),
                ('commissionmonthly', models.FloatField(db_column='CommissionMonthly')),
                ('agentdaily', models.FloatField(db_column='AgentDaily')),
                ('agentmonthly', models.FloatField(db_column='AgentMonthly')),
                ('balanceprevday', models.FloatField(db_column='BalancePrevDay')),
                ('balanceprevmonth', models.FloatField(db_column='BalancePrevMonth')),
                ('equityprevday', models.FloatField(db_column='EquityPrevDay')),
                ('equityprevmonth', models.FloatField(db_column='EquityPrevMonth')),
                ('margin', models.FloatField(db_column='Margin')),
                ('marginfree', models.FloatField(db_column='MarginFree')),
                ('marginlevel', models.FloatField(db_column='MarginLevel')),
                ('marginleverage', models.PositiveIntegerField(db_column='MarginLeverage')),
                ('profit', models.FloatField(db_column='Profit')),
                ('profitstorage', models.FloatField(db_column='ProfitStorage')),
                ('profitcommission', models.FloatField(db_column='ProfitCommission')),
                ('profitequity', models.FloatField(db_column='ProfitEquity')),
                ('dailyprofit', models.FloatField(db_column='DailyProfit')),
                ('dailybalance', models.FloatField(db_column='DailyBalance')),
                ('dailycredit', models.FloatField(db_column='DailyCredit')),
                ('dailycharge', models.FloatField(db_column='DailyCharge')),
                ('dailycorrection', models.FloatField(db_column='DailyCorrection')),
                ('dailybonus', models.FloatField(db_column='DailyBonus')),
                ('dailystorage', models.FloatField(db_column='DailyStorage')),
                ('dailycomminstant', models.FloatField(db_column='DailyCommInstant')),
                ('dailycommround', models.FloatField(db_column='DailyCommRound')),
                ('dailyagent', models.FloatField(db_column='DailyAgent')),
                ('dailyinterest', models.FloatField(db_column='DailyInterest')),
            ],
            options={
                'db_table': 'mt5_daily_2018',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Daily2019',
            fields=[
                ('datetime', models.BigIntegerField(db_column='Datetime', primary_key=True, serialize=False)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('datetimeprev', models.BigIntegerField(db_column='DatetimePrev')),
                ('name', models.CharField(db_column='Name', max_length=128)),
                ('group', models.CharField(db_column='Group', max_length=64)),
                ('currency', models.CharField(db_column='Currency', max_length=32)),
                ('company', models.CharField(db_column='Company', max_length=64)),
                ('email', models.CharField(db_column='EMail', max_length=64)),
                ('balance', models.FloatField(db_column='Balance')),
                ('credit', models.FloatField(db_column='Credit')),
                ('interestrate', models.FloatField(db_column='InterestRate')),
                ('commissiondaily', models.FloatField(db_column='CommissionDaily')),
                ('commissionmonthly', models.FloatField(db_column='CommissionMonthly')),
                ('agentdaily', models.FloatField(db_column='AgentDaily')),
                ('agentmonthly', models.FloatField(db_column='AgentMonthly')),
                ('balanceprevday', models.FloatField(db_column='BalancePrevDay')),
                ('balanceprevmonth', models.FloatField(db_column='BalancePrevMonth')),
                ('equityprevday', models.FloatField(db_column='EquityPrevDay')),
                ('equityprevmonth', models.FloatField(db_column='EquityPrevMonth')),
                ('margin', models.FloatField(db_column='Margin')),
                ('marginfree', models.FloatField(db_column='MarginFree')),
                ('marginlevel', models.FloatField(db_column='MarginLevel')),
                ('marginleverage', models.PositiveIntegerField(db_column='MarginLeverage')),
                ('profit', models.FloatField(db_column='Profit')),
                ('profitstorage', models.FloatField(db_column='ProfitStorage')),
                ('profitcommission', models.FloatField(db_column='ProfitCommission')),
                ('profitequity', models.FloatField(db_column='ProfitEquity')),
                ('dailyprofit', models.FloatField(db_column='DailyProfit')),
                ('dailybalance', models.FloatField(db_column='DailyBalance')),
                ('dailycredit', models.FloatField(db_column='DailyCredit')),
                ('dailycharge', models.FloatField(db_column='DailyCharge')),
                ('dailycorrection', models.FloatField(db_column='DailyCorrection')),
                ('dailybonus', models.FloatField(db_column='DailyBonus')),
                ('dailystorage', models.FloatField(db_column='DailyStorage')),
                ('dailycomminstant', models.FloatField(db_column='DailyCommInstant')),
                ('dailycommround', models.FloatField(db_column='DailyCommRound')),
                ('dailyagent', models.FloatField(db_column='DailyAgent')),
                ('dailyinterest', models.FloatField(db_column='DailyInterest')),
            ],
            options={
                'db_table': 'mt5_daily_2019',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Deals',
            fields=[
                ('deal', models.BigIntegerField(db_column='Deal', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('externalid', models.CharField(db_column='ExternalID', max_length=32)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('dealer', models.BigIntegerField(db_column='Dealer')),
                ('order', models.BigIntegerField(db_column='Order')),
                ('action', models.PositiveIntegerField(db_column='Action')),
                ('entry', models.PositiveIntegerField(db_column='Entry')),
                ('reason', models.PositiveIntegerField(db_column='Reason')),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('digitscurrency', models.PositiveIntegerField(db_column='DigitsCurrency')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('time', models.DateTimeField(db_column='Time')),
                ('timemsc', models.DateTimeField(db_column='TimeMsc')),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('price', models.FloatField(db_column='Price')),
                ('volumeext', models.BigIntegerField(db_column='VolumeExt')),
                ('profit', models.FloatField(db_column='Profit')),
                ('storage', models.FloatField(db_column='Storage')),
                ('commission', models.FloatField(db_column='Commission')),
                ('rateprofit', models.FloatField(db_column='RateProfit')),
                ('ratemargin', models.FloatField(db_column='RateMargin')),
                ('expertid', models.BigIntegerField(db_column='ExpertID')),
                ('positionid', models.BigIntegerField(db_column='PositionID')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
                ('profitraw', models.FloatField(db_column='ProfitRaw')),
                ('priceposition', models.FloatField(db_column='PricePosition')),
                ('volumeclosedext', models.BigIntegerField(db_column='VolumeClosedExt')),
                ('tickvalue', models.FloatField(db_column='TickValue')),
                ('ticksize', models.FloatField(db_column='TickSize')),
                ('flags', models.BigIntegerField(db_column='Flags')),
                ('gateway', models.CharField(db_column='Gateway', max_length=16)),
                ('pricegateway', models.FloatField(db_column='PriceGateway')),
                ('modifyflags', models.PositiveIntegerField(db_column='ModifyFlags')),
                ('volume', models.BigIntegerField(db_column='Volume')),
                ('volumeclosed', models.BigIntegerField(db_column='VolumeClosed')),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_deals',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Deals2018',
            fields=[
                ('deal', models.BigIntegerField(db_column='Deal', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('externalid', models.CharField(db_column='ExternalID', max_length=32)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('dealer', models.BigIntegerField(db_column='Dealer')),
                ('order', models.BigIntegerField(db_column='Order')),
                ('action', models.PositiveIntegerField(db_column='Action')),
                ('entry', models.PositiveIntegerField(db_column='Entry')),
                ('reason', models.PositiveIntegerField(db_column='Reason')),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('digitscurrency', models.PositiveIntegerField(db_column='DigitsCurrency')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('time', models.DateTimeField(db_column='Time')),
                ('timemsc', models.DateTimeField(db_column='TimeMsc')),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('price', models.FloatField(db_column='Price')),
                ('volumeext', models.BigIntegerField(db_column='VolumeExt')),
                ('profit', models.FloatField(db_column='Profit')),
                ('storage', models.FloatField(db_column='Storage')),
                ('commission', models.FloatField(db_column='Commission')),
                ('rateprofit', models.FloatField(db_column='RateProfit')),
                ('ratemargin', models.FloatField(db_column='RateMargin')),
                ('expertid', models.BigIntegerField(db_column='ExpertID')),
                ('positionid', models.BigIntegerField(db_column='PositionID')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
                ('profitraw', models.FloatField(db_column='ProfitRaw')),
                ('priceposition', models.FloatField(db_column='PricePosition')),
                ('volumeclosedext', models.BigIntegerField(db_column='VolumeClosedExt')),
                ('tickvalue', models.FloatField(db_column='TickValue')),
                ('ticksize', models.FloatField(db_column='TickSize')),
                ('flags', models.BigIntegerField(db_column='Flags')),
                ('gateway', models.CharField(db_column='Gateway', max_length=16)),
                ('pricegateway', models.FloatField(db_column='PriceGateway')),
                ('modifyflags', models.PositiveIntegerField(db_column='ModifyFlags')),
                ('volume', models.BigIntegerField(db_column='Volume')),
                ('volumeclosed', models.BigIntegerField(db_column='VolumeClosed')),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_deals_2018',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Deals2019',
            fields=[
                ('deal', models.BigIntegerField(db_column='Deal', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('externalid', models.CharField(db_column='ExternalID', max_length=32)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('dealer', models.BigIntegerField(db_column='Dealer')),
                ('order', models.BigIntegerField(db_column='Order')),
                ('action', models.PositiveIntegerField(db_column='Action')),
                ('entry', models.PositiveIntegerField(db_column='Entry')),
                ('reason', models.PositiveIntegerField(db_column='Reason')),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('digitscurrency', models.PositiveIntegerField(db_column='DigitsCurrency')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('time', models.DateTimeField(db_column='Time')),
                ('timemsc', models.DateTimeField(db_column='TimeMsc')),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('price', models.FloatField(db_column='Price')),
                ('volumeext', models.BigIntegerField(db_column='VolumeExt')),
                ('profit', models.FloatField(db_column='Profit')),
                ('storage', models.FloatField(db_column='Storage')),
                ('commission', models.FloatField(db_column='Commission')),
                ('rateprofit', models.FloatField(db_column='RateProfit')),
                ('ratemargin', models.FloatField(db_column='RateMargin')),
                ('expertid', models.BigIntegerField(db_column='ExpertID')),
                ('positionid', models.BigIntegerField(db_column='PositionID')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
                ('profitraw', models.FloatField(db_column='ProfitRaw')),
                ('priceposition', models.FloatField(db_column='PricePosition')),
                ('volumeclosedext', models.BigIntegerField(db_column='VolumeClosedExt')),
                ('tickvalue', models.FloatField(db_column='TickValue')),
                ('ticksize', models.FloatField(db_column='TickSize')),
                ('flags', models.BigIntegerField(db_column='Flags')),
                ('gateway', models.CharField(db_column='Gateway', max_length=16)),
                ('pricegateway', models.FloatField(db_column='PriceGateway')),
                ('modifyflags', models.PositiveIntegerField(db_column='ModifyFlags')),
                ('volume', models.BigIntegerField(db_column='Volume')),
                ('volumeclosed', models.BigIntegerField(db_column='VolumeClosed')),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_deals_2019',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5FeederParams',
            fields=[
                ('param_id', models.BigIntegerField(db_column='Param_ID', primary_key=True, serialize=False)),
                ('feeder', models.CharField(db_column='Feeder', max_length=64)),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('name', models.CharField(db_column='Name', max_length=64)),
                ('value', models.CharField(db_column='Value', max_length=256)),
            ],
            options={
                'db_table': 'mt5_feeder_params',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Feeders',
            fields=[
                ('feeder', models.CharField(db_column='Feeder', max_length=64, primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('module', models.CharField(db_column='Module', max_length=256)),
                ('gatewayserver', models.CharField(db_column='GatewayServer', max_length=128)),
                ('feedserver', models.CharField(db_column='FeedServer', max_length=128)),
                ('enable', models.IntegerField(db_column='Enable')),
                ('mode', models.IntegerField(db_column='Mode')),
                ('timeout', models.PositiveIntegerField(db_column='Timeout')),
                ('timeoutreconnect', models.PositiveIntegerField(db_column='TimeoutReconnect')),
                ('timeoutsleep', models.PositiveIntegerField(db_column='TimeoutSleep')),
                ('attempssleep', models.PositiveIntegerField(db_column='AttempsSleep')),
                ('symbols', models.CharField(db_column='Symbols', max_length=512)),
                ('sysconnection', models.PositiveIntegerField(db_column='SysConnection')),
                ('syslasttime', models.DateTimeField(db_column='SysLastTime')),
                ('company', models.CharField(db_column='Company', max_length=256)),
                ('issuer', models.CharField(db_column='Issuer', max_length=256)),
                ('tickstatscount', models.PositiveIntegerField(db_column='TickStatsCount')),
                ('tickscount', models.PositiveIntegerField(db_column='TicksCount')),
                ('bookscount', models.PositiveIntegerField(db_column='BooksCount')),
                ('newscount', models.PositiveIntegerField(db_column='NewsCount')),
                ('bytesreceived', models.PositiveIntegerField(db_column='BytesReceived')),
                ('bytessent', models.PositiveIntegerField(db_column='BytesSent')),
                ('stateflags', models.PositiveIntegerField(db_column='StateFlags')),
            ],
            options={
                'db_table': 'mt5_feeders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5FeederTranslates',
            fields=[
                ('symbol', models.CharField(db_column='Symbol', max_length=128, primary_key=True, serialize=False)),
                ('feeder', models.CharField(db_column='Feeder', max_length=64)),
                ('source', models.CharField(db_column='Source', max_length=128)),
                ('bidmarkup', models.IntegerField(db_column='BidMarkup')),
                ('askmarkup', models.IntegerField(db_column='AskMarkup')),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
            ],
            options={
                'db_table': 'mt5_feeder_translates',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Firewall',
            fields=[
                ('ipfrom', models.CharField(db_column='IPFrom', max_length=64, primary_key=True, serialize=False)),
                ('ipto', models.CharField(db_column='IPTo', max_length=64)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('action', models.PositiveIntegerField(db_column='Action')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
            ],
            options={
                'db_table': 'mt5_firewall',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Groups',
            fields=[
                ('group_id', models.BigIntegerField(db_column='Group_ID', primary_key=True, serialize=False)),
                ('group', models.CharField(db_column='Group', max_length=64)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('server', models.BigIntegerField(db_column='Server')),
                ('permissionsflags', models.BigIntegerField(db_column='PermissionsFlags')),
                ('authmode', models.PositiveIntegerField(db_column='AuthMode')),
                ('authpasswordmin', models.PositiveIntegerField(db_column='AuthPasswordMin')),
                ('authotpmode', models.PositiveIntegerField(db_column='AuthOTPMode')),
                ('company', models.CharField(db_column='Company', max_length=128)),
                ('companypage', models.CharField(db_column='CompanyPage', max_length=256)),
                ('companyemail', models.CharField(db_column='CompanyEmail', max_length=64)),
                ('companysupportpage', models.CharField(db_column='CompanySupportPage', max_length=256)),
                ('companysupportemail', models.CharField(db_column='CompanySupportEmail', max_length=64)),
                ('companycatalog', models.CharField(db_column='CompanyCatalog', max_length=64)),
                ('currency', models.CharField(db_column='Currency', max_length=32)),
                ('currencydigits', models.PositiveIntegerField(db_column='CurrencyDigits')),
                ('reportsmode', models.PositiveIntegerField(db_column='ReportsMode')),
                ('reportsflags', models.BigIntegerField(db_column='ReportsFlags')),
                ('newsmode', models.PositiveIntegerField(db_column='NewsMode')),
                ('newscategory', models.CharField(db_column='NewsCategory', max_length=64)),
                ('mailmode', models.PositiveIntegerField(db_column='MailMode')),
                ('tradeflags', models.BigIntegerField(db_column='TradeFlags')),
                ('transfermode', models.PositiveIntegerField(db_column='TransferMode')),
                ('tradeinterestrate', models.FloatField(db_column='TradeInterestrate')),
                ('tradevirtualcredit', models.FloatField(db_column='TradeVirtualCredit')),
                ('marginmode', models.PositiveIntegerField(db_column='MarginMode')),
                ('marginsomode', models.PositiveIntegerField(db_column='MarginSOMode')),
                ('marginfreemode', models.PositiveIntegerField(db_column='MarginFreeMode')),
                ('margincall', models.FloatField(db_column='MarginCall')),
                ('marginstopout', models.FloatField(db_column='MarginStopOut')),
                ('marginfreeprofitmode', models.PositiveIntegerField(db_column='MarginFreeProfitMode')),
                ('demoleverage', models.PositiveIntegerField(db_column='DemoLeverage')),
                ('demodeposit', models.FloatField(db_column='DemoDeposit')),
                ('limithistory', models.PositiveIntegerField(db_column='LimitHistory')),
                ('limitorders', models.PositiveIntegerField(db_column='LimitOrders')),
                ('limitsymbols', models.PositiveIntegerField(db_column='LimitSymbols')),
                ('limitpositions', models.PositiveIntegerField(db_column='LimitPositions')),
            ],
            options={
                'db_table': 'mt5_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5GroupsSymbols',
            fields=[
                ('symbol_id', models.BigIntegerField(db_column='Symbol_ID', primary_key=True, serialize=False)),
                ('group_id', models.BigIntegerField(db_column='Group_ID')),
                ('path', models.CharField(db_column='Path', max_length=128)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('trademode', models.PositiveIntegerField(blank=True, db_column='TradeMode', null=True)),
                ('execmode', models.PositiveIntegerField(blank=True, db_column='ExecMode', null=True)),
                ('fillflags', models.PositiveIntegerField(blank=True, db_column='FillFlags', null=True)),
                ('expirflags', models.PositiveIntegerField(blank=True, db_column='ExpirFlags', null=True)),
                ('orderflags', models.PositiveIntegerField(blank=True, db_column='OrderFlags', null=True)),
                ('spreaddiff', models.IntegerField(blank=True, db_column='SpreadDiff', null=True)),
                ('spreaddiffbalance', models.IntegerField(blank=True, db_column='SpreadDiffBalance', null=True)),
                ('stopslevel', models.IntegerField(blank=True, db_column='StopsLevel', null=True)),
                ('freezelevel', models.IntegerField(blank=True, db_column='FreezeLevel', null=True)),
                ('volumeminext', models.BigIntegerField(blank=True, db_column='VolumeMinExt', null=True)),
                ('volumemaxext', models.BigIntegerField(blank=True, db_column='VolumeMaxExt', null=True)),
                ('volumestepext', models.BigIntegerField(blank=True, db_column='VolumeStepExt', null=True)),
                ('volumelimitext', models.BigIntegerField(blank=True, db_column='VolumeLimitExt', null=True)),
                ('marginflags', models.PositiveIntegerField(blank=True, db_column='MarginFlags', null=True)),
                ('margininitial', models.FloatField(blank=True, db_column='MarginInitial', null=True)),
                ('marginmaintenance', models.FloatField(blank=True, db_column='MarginMaintenance', null=True)),
                ('margininitialbuy', models.FloatField(blank=True, db_column='MarginInitialBuy', null=True)),
                ('margininitialsell', models.FloatField(blank=True, db_column='MarginInitialSell', null=True)),
                ('margininitialbuylimit', models.FloatField(blank=True, db_column='MarginInitialBuyLimit', null=True)),
                ('margininitialselllimit', models.FloatField(blank=True, db_column='MarginInitialSellLimit', null=True)),
                ('margininitialbuystop', models.FloatField(blank=True, db_column='MarginInitialBuyStop', null=True)),
                ('margininitialsellstop', models.FloatField(blank=True, db_column='MarginInitialSellStop', null=True)),
                ('margininitialbuystoplimit', models.FloatField(blank=True, db_column='MarginInitialBuyStopLimit', null=True)),
                ('margininitialsellstoplimit', models.FloatField(blank=True, db_column='MarginInitialSellStopLimit', null=True)),
                ('marginmaintenancebuy', models.FloatField(blank=True, db_column='MarginMaintenanceBuy', null=True)),
                ('marginmaintenancesell', models.FloatField(blank=True, db_column='MarginMaintenanceSell', null=True)),
                ('marginmaintenancebuylimit', models.FloatField(blank=True, db_column='MarginMaintenanceBuyLimit', null=True)),
                ('marginmaintenanceselllimit', models.FloatField(blank=True, db_column='MarginMaintenanceSellLimit', null=True)),
                ('marginmaintenancebuystop', models.FloatField(blank=True, db_column='MarginMaintenanceBuyStop', null=True)),
                ('marginmaintenancesellstop', models.FloatField(blank=True, db_column='MarginMaintenanceSellStop', null=True)),
                ('marginmaintenancebuystoplimit', models.FloatField(blank=True, db_column='MarginMaintenanceBuyStopLimit', null=True)),
                ('marginmaintenancesellstoplimit', models.FloatField(blank=True, db_column='MarginMaintenanceSellStopLimit', null=True)),
                ('marginliquidity', models.FloatField(blank=True, db_column='MarginLiquidity', null=True)),
                ('marginhedged', models.FloatField(blank=True, db_column='MarginHedged', null=True)),
                ('margincurrency', models.FloatField(blank=True, db_column='MarginCurrency', null=True)),
                ('swapmode', models.PositiveIntegerField(blank=True, db_column='SwapMode', null=True)),
                ('swaplong', models.FloatField(blank=True, db_column='SwapLong', null=True)),
                ('swapshort', models.FloatField(blank=True, db_column='SwapShort', null=True)),
                ('swap3day', models.IntegerField(blank=True, db_column='Swap3Day', null=True)),
                ('reflags', models.PositiveIntegerField(blank=True, db_column='REFlags', null=True)),
                ('retimeout', models.PositiveIntegerField(blank=True, db_column='RETimeout', null=True)),
                ('ieflags', models.PositiveIntegerField(blank=True, db_column='IEFlags', null=True)),
                ('iecheckmode', models.PositiveIntegerField(blank=True, db_column='IECheckMode', null=True)),
                ('ietimeout', models.PositiveIntegerField(blank=True, db_column='IETimeout', null=True)),
                ('ieslipprofit', models.PositiveIntegerField(blank=True, db_column='IESlipProfit', null=True)),
                ('iesliplosing', models.PositiveIntegerField(blank=True, db_column='IESlipLosing', null=True)),
                ('ievolumemaxext', models.BigIntegerField(blank=True, db_column='IEVolumeMaxExt', null=True)),
                ('permissionsflags', models.PositiveIntegerField(blank=True, db_column='PermissionsFlags', null=True)),
                ('permissionsbookdepth', models.PositiveIntegerField(blank=True, db_column='PermissionsBookdepth', null=True)),
                ('volumemin', models.BigIntegerField(blank=True, db_column='VolumeMin', null=True)),
                ('volumemax', models.BigIntegerField(blank=True, db_column='VolumeMax', null=True)),
                ('volumestep', models.BigIntegerField(blank=True, db_column='VolumeStep', null=True)),
                ('volumelimit', models.BigIntegerField(blank=True, db_column='VolumeLimit', null=True)),
                ('ievolumemax', models.BigIntegerField(blank=True, db_column='IEVolumeMax', null=True)),
            ],
            options={
                'db_table': 'mt5_groups_symbols',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Holidays',
            fields=[
                ('year', models.PositiveIntegerField(db_column='Year', primary_key=True, serialize=False)),
                ('month', models.PositiveIntegerField(db_column='Month')),
                ('day', models.PositiveIntegerField(db_column='Day')),
                ('from_field', models.PositiveIntegerField(db_column='From')),
                ('to', models.PositiveIntegerField(db_column='To')),
                ('description', models.CharField(db_column='Description', max_length=128)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('symbols', models.CharField(db_column='Symbols', max_length=2000)),
            ],
            options={
                'db_table': 'mt5_holidays',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Managers',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('name', models.CharField(db_column='Name', max_length=128)),
                ('mailbox', models.CharField(db_column='Mailbox', max_length=64)),
                ('server', models.BigIntegerField(db_column='Server')),
                ('requestlimitlogs', models.PositiveIntegerField(db_column='RequestLimitLogs')),
                ('requestlimitreports', models.PositiveIntegerField(db_column='RequestLimitReports')),
                ('groups', models.CharField(db_column='Groups', max_length=2000)),
                ('access', models.CharField(db_column='Access', max_length=2000)),
                ('right_admin', models.PositiveIntegerField(db_column='Right_Admin')),
                ('right_manager', models.PositiveIntegerField(db_column='Right_Manager')),
                ('right_cfg_servers', models.PositiveIntegerField(db_column='Right_Cfg_Servers')),
                ('right_cfg_access', models.PositiveIntegerField(db_column='Right_Cfg_Access')),
                ('right_cfg_time', models.PositiveIntegerField(db_column='Right_Cfg_Time')),
                ('right_cfg_holidays', models.PositiveIntegerField(db_column='Right_Cfg_Holidays')),
                ('right_cfg_groups', models.PositiveIntegerField(db_column='Right_Cfg_Groups')),
                ('right_cfg_managers', models.PositiveIntegerField(db_column='Right_Cfg_Managers')),
                ('right_cfg_requests', models.PositiveIntegerField(db_column='Right_Cfg_Requests')),
                ('right_cfg_gateways', models.PositiveIntegerField(db_column='Right_Cfg_Gateways')),
                ('right_cfg_plugins', models.PositiveIntegerField(db_column='Right_Cfg_Plugins')),
                ('right_cfg_datafeeds', models.PositiveIntegerField(db_column='Right_Cfg_Datafeeds')),
                ('right_cfg_reports', models.PositiveIntegerField(db_column='Right_Cfg_Reports')),
                ('right_cfg_symbols', models.PositiveIntegerField(db_column='Right_Cfg_Symbols')),
                ('right_cfg_hst_sync', models.PositiveIntegerField(db_column='Right_Cfg_Hst_Sync')),
                ('right_srv_journals', models.PositiveIntegerField(db_column='Right_Srv_Journals')),
                ('right_srv_reports', models.PositiveIntegerField(db_column='Right_Srv_Reports')),
                ('right_charts', models.PositiveIntegerField(db_column='Right_Charts')),
                ('right_email', models.PositiveIntegerField(db_column='Right_Email')),
                ('right_news', models.PositiveIntegerField(db_column='Right_News')),
                ('right_export', models.PositiveIntegerField(db_column='Right_Export')),
                ('right_techsupport', models.PositiveIntegerField(db_column='Right_Techsupport')),
                ('right_market', models.PositiveIntegerField(db_column='Right_Market')),
                ('right_accountant', models.PositiveIntegerField(db_column='Right_Accountant')),
                ('right_acc_read', models.PositiveIntegerField(db_column='Right_Acc_Read')),
                ('right_acc_details', models.PositiveIntegerField(db_column='Right_Acc_Details')),
                ('right_acc_manager', models.PositiveIntegerField(db_column='Right_Acc_Manager')),
                ('right_acc_delete', models.PositiveIntegerField(db_column='Right_Acc_Delete')),
                ('right_acc_online', models.PositiveIntegerField(db_column='Right_Acc_Online')),
                ('right_confirm_actions', models.PositiveIntegerField(db_column='Right_Confirm_Actions')),
                ('right_notifications', models.PositiveIntegerField(db_column='Right_Notifications')),
                ('right_trades_read', models.PositiveIntegerField(db_column='Right_Trades_Read')),
                ('right_trades_manager', models.PositiveIntegerField(db_column='Right_Trades_Manager')),
                ('right_trades_delete', models.PositiveIntegerField(db_column='Right_Trades_Delete')),
                ('right_trades_dealer', models.PositiveIntegerField(db_column='Right_Trades_Dealer')),
                ('right_trades_supervisor', models.PositiveIntegerField(db_column='Right_Trades_Supervisor')),
                ('right_quotes_raw', models.PositiveIntegerField(db_column='Right_Quotes_Raw')),
                ('right_quotes', models.PositiveIntegerField(db_column='Right_Quotes')),
                ('right_symbol_details', models.PositiveIntegerField(db_column='Right_Symbol_Details')),
                ('right_risk_manager', models.PositiveIntegerField(db_column='Right_Risk_Manager')),
                ('right_group_details', models.PositiveIntegerField(db_column='Right_Group_Details')),
                ('right_reports', models.PositiveIntegerField(db_column='Right_Reports')),
            ],
            options={
                'db_table': 'mt5_managers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Network',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('name', models.CharField(db_column='Name', max_length=32)),
                ('address', models.CharField(db_column='Address', max_length=64)),
                ('port', models.PositiveIntegerField(db_column='Port')),
                ('adapter', models.CharField(db_column='Adapter', max_length=128)),
                ('servicetime', models.PositiveIntegerField(db_column='ServiceTime')),
                ('failovermode', models.PositiveIntegerField(db_column='FailoverMode')),
                ('failovertimeout', models.PositiveIntegerField(db_column='FailoverTimeout')),
                ('adapters', models.CharField(db_column='Adapters', max_length=512)),
                ('addresses', models.CharField(db_column='Addresses', max_length=512)),
                ('binds', models.CharField(db_column='Binds', max_length=512)),
                ('points', models.CharField(db_column='Points', max_length=512)),
                ('version', models.PositiveIntegerField(db_column='Version')),
                ('build', models.PositiveIntegerField(db_column='Build')),
                ('builddate', models.CharField(db_column='BuildDate', max_length=32)),
                ('sysconnection', models.PositiveIntegerField(db_column='SysConnection')),
                ('syslastboot', models.DateTimeField(db_column='SysLastBoot')),
                ('sysosname', models.CharField(db_column='SysOsName', max_length=64)),
                ('syscpuname', models.CharField(db_column='SysCpuName', max_length=64)),
                ('syscpunumber', models.PositiveIntegerField(db_column='SysCpuNumber')),
                ('sysbits', models.PositiveIntegerField(db_column='SysBits')),
                ('sysmemorytotal', models.PositiveIntegerField(db_column='SysMemoryTotal')),
                ('sysmemoryfree', models.PositiveIntegerField(db_column='SysMemoryFree')),
                ('sysmemorycritical', models.PositiveIntegerField(db_column='SysMemoryCritical')),
                ('syshddsize', models.PositiveIntegerField(db_column='SysHddSize')),
                ('syshddfree', models.PositiveIntegerField(db_column='SysHddFree')),
                ('syshddcritical', models.PositiveIntegerField(db_column='SysHddCritical')),
                ('syshddfragmentation', models.PositiveIntegerField(db_column='SysHddFragmentation')),
                ('syshddfragcritical', models.PositiveIntegerField(db_column='SysHddFragCritical')),
                ('syshdddefragrecommend', models.PositiveIntegerField(db_column='SysHddDefragRecommend')),
                ('syshddreadspeed', models.PositiveIntegerField(db_column='SysHddReadSpeed')),
                ('syshddreadcritical', models.PositiveIntegerField(db_column='SysHddReadCritical')),
                ('syshddwritespeed', models.PositiveIntegerField(db_column='SysHddWriteSpeed')),
                ('syshddwritecritical', models.PositiveIntegerField(db_column='SysHddWriteCritical')),
                ('perfconnectsmax', models.PositiveIntegerField(db_column='PerfConnectsMax')),
                ('perfconnectscritical', models.PositiveIntegerField(db_column='PerfConnectsCritical')),
                ('perfcpumax', models.PositiveIntegerField(db_column='PerfCpuMax')),
                ('perfcpucritical', models.PositiveIntegerField(db_column='PerfCpuCritical')),
                ('perfmemorymin', models.PositiveIntegerField(db_column='PerfMemoryMin')),
                ('perfmemorycritical', models.PositiveIntegerField(db_column='PerfMemoryCritical')),
                ('perfmemblockmin', models.PositiveIntegerField(db_column='PerfMemBlockMin')),
                ('perfmemblockcritical', models.PositiveIntegerField(db_column='PerfMemBlockCritical')),
                ('perfnetworkmax', models.PositiveIntegerField(db_column='PerfNetworkMax')),
                ('perfnetworkcritical', models.PositiveIntegerField(db_column='PerfNetworkCritical')),
                ('perfsocketsmax', models.PositiveIntegerField(db_column='PerfSocketsMax')),
                ('perfsocketscritical', models.PositiveIntegerField(db_column='PerfSocketsCritical')),
            ],
            options={
                'db_table': 'mt5_network',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5NetworkAccessServers',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('priority', models.PositiveIntegerField(db_column='Priority')),
                ('antifloodenable', models.PositiveIntegerField(db_column='AntifloodEnable')),
                ('antifloodconnects', models.PositiveIntegerField(db_column='AntifloodConnects')),
                ('antiflooderrors', models.PositiveIntegerField(db_column='AntifloodErrors')),
                ('newsmaxcount', models.PositiveIntegerField(db_column='NewsMaxCount')),
                ('balancingconnections', models.PositiveIntegerField(db_column='BalancingConnections')),
                ('balancingpriority', models.PositiveIntegerField(db_column='BalancingPriority')),
                ('accessmask', models.PositiveIntegerField(db_column='AccessMask')),
                ('accessflags', models.PositiveIntegerField(db_column='AccessFlags')),
                ('servers', models.CharField(db_column='Servers', max_length=256)),
            ],
            options={
                'db_table': 'mt5_network_access_servers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5NetworkAntiddos',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('priority', models.PositiveIntegerField(db_column='Priority')),
                ('accessmask', models.PositiveIntegerField(db_column='AccessMask')),
            ],
            options={
                'db_table': 'mt5_network_antiddos',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5NetworkBackupFolders',
            fields=[
                ('folder_id', models.BigIntegerField(db_column='Folder_ID', primary_key=True, serialize=False)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('folder', models.CharField(db_column='Folder', max_length=260)),
                ('masks', models.CharField(db_column='Masks', max_length=260)),
                ('filter', models.CharField(db_column='Filter', max_length=260)),
            ],
            options={
                'db_table': 'mt5_network_backup_folders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5NetworkBackupServers',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('pairserver', models.BigIntegerField(db_column='PairServer')),
                ('backupflags', models.BigIntegerField(db_column='BackupFlags')),
                ('backuppath', models.CharField(db_column='BackupPath', max_length=256)),
                ('backupperiod', models.PositiveIntegerField(db_column='BackupPeriod')),
                ('backupttl', models.PositiveIntegerField(db_column='BackupTtl')),
                ('backuptimefull', models.PositiveIntegerField(db_column='BackupTimeFull')),
                ('backuplaststartup', models.DateTimeField(db_column='BackupLastStartup')),
                ('backuplastfull', models.DateTimeField(db_column='BackupLastFull')),
                ('backuplastarchive', models.DateTimeField(db_column='BackupLastArchive')),
                ('backuplastsync', models.DateTimeField(db_column='BackupLastSync')),
                ('sqlmode', models.PositiveIntegerField(db_column='SqlMode')),
                ('sqlserver', models.CharField(db_column='SqlServer', max_length=128)),
                ('sqlfolder', models.CharField(db_column='SqlFolder', max_length=128)),
                ('sqlflags', models.BigIntegerField(db_column='SqlFlags')),
                ('sqlperiod', models.PositiveIntegerField(db_column='SqlPeriod')),
            ],
            options={
                'db_table': 'mt5_network_backup_servers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5NetworkHistoryServers',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('datafeedtimeout', models.PositiveIntegerField(db_column='DatafeedTimeout')),
                ('newsmaxcount', models.PositiveIntegerField(db_column='NewsMaxCount')),
            ],
            options={
                'db_table': 'mt5_network_history_servers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5NetworkTradeServers',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('demomode', models.PositiveIntegerField(db_column='DemoMode')),
                ('demoperiod', models.PositiveIntegerField(db_column='DemoPeriod')),
                ('overnighttime', models.PositiveIntegerField(db_column='OvernightTime')),
                ('overnightmode', models.PositiveIntegerField(db_column='OvernightMode')),
                ('overnighprevtime', models.DateTimeField(db_column='OvernighPrevTime')),
                ('overnightlasttime', models.DateTimeField(db_column='OvernightLastTime')),
                ('overnightdays', models.PositiveIntegerField(db_column='OvernightDays')),
                ('overmonthmode', models.PositiveIntegerField(db_column='OvermonthMode')),
                ('overmonthprevtime', models.DateTimeField(db_column='OvermonthPrevTime')),
                ('overmonthlasttime', models.DateTimeField(db_column='OvermonthLastTime')),
                ('totalusers', models.PositiveIntegerField(db_column='TotalUsers')),
                ('totalusersreal', models.PositiveIntegerField(db_column='TotalUsersReal')),
                ('totaldeals', models.PositiveIntegerField(db_column='TotalDeals')),
                ('totalorders', models.PositiveIntegerField(db_column='TotalOrders')),
                ('totalordershistory', models.PositiveIntegerField(db_column='TotalOrdersHistory')),
                ('totalpositions', models.PositiveIntegerField(db_column='TotalPositions')),
                ('loginsrange', models.CharField(db_column='LoginsRange', max_length=256)),
                ('loginsrangeused', models.CharField(db_column='LoginsRangeUsed', max_length=256)),
                ('ordersrange', models.CharField(db_column='OrdersRange', max_length=256)),
                ('ordersrangeused', models.CharField(db_column='OrdersRangeUsed', max_length=256)),
                ('dealsrange', models.CharField(db_column='DealsRange', max_length=256)),
                ('dealsrangeused', models.CharField(db_column='DealsRangeUsed', max_length=256)),
            ],
            options={
                'db_table': 'mt5_network_trade_servers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Orders',
            fields=[
                ('order', models.BigIntegerField(db_column='Order', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('externalid', models.CharField(db_column='ExternalID', max_length=32)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('dealer', models.BigIntegerField(db_column='Dealer')),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('digitscurrency', models.PositiveIntegerField(db_column='DigitsCurrency')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('state', models.PositiveIntegerField(db_column='State')),
                ('reason', models.PositiveIntegerField(db_column='Reason')),
                ('timesetup', models.DateTimeField(db_column='TimeSetup')),
                ('timeexpiration', models.DateTimeField(db_column='TimeExpiration')),
                ('timedone', models.DateTimeField(db_column='TimeDone')),
                ('timesetupmsc', models.DateTimeField(db_column='TimeSetupMsc')),
                ('timedonemsc', models.DateTimeField(db_column='TimeDoneMsc')),
                ('modifyflags', models.PositiveIntegerField(db_column='ModifyFlags')),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('typefill', models.PositiveIntegerField(db_column='TypeFill')),
                ('typetime', models.PositiveIntegerField(db_column='TypeTime')),
                ('priceorder', models.FloatField(db_column='PriceOrder')),
                ('pricetrigger', models.FloatField(db_column='PriceTrigger')),
                ('pricecurrent', models.FloatField(db_column='PriceCurrent')),
                ('pricesl', models.FloatField(db_column='PriceSL')),
                ('pricetp', models.FloatField(db_column='PriceTP')),
                ('volumeinitialext', models.BigIntegerField(db_column='VolumeInitialExt')),
                ('volumecurrentext', models.BigIntegerField(db_column='VolumeCurrentExt')),
                ('expertid', models.BigIntegerField(db_column='ExpertID')),
                ('positionid', models.BigIntegerField(db_column='PositionID')),
                ('positionbyid', models.BigIntegerField(db_column='PositionByID')),
                ('ratemargin', models.FloatField(db_column='RateMargin')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
                ('activationmode', models.PositiveIntegerField(db_column='ActivationMode')),
                ('activationtime', models.BigIntegerField(db_column='ActivationTime')),
                ('activationprice', models.FloatField(db_column='ActivationPrice')),
                ('activationflags', models.PositiveIntegerField(db_column='ActivationFlags')),
                ('volumeinitial', models.BigIntegerField(db_column='VolumeInitial')),
                ('volumecurrent', models.BigIntegerField(db_column='VolumeCurrent')),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_orders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Orders2019',
            fields=[
                ('order', models.BigIntegerField(db_column='Order', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('externalid', models.CharField(db_column='ExternalID', max_length=32)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('dealer', models.BigIntegerField(db_column='Dealer')),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('digitscurrency', models.PositiveIntegerField(db_column='DigitsCurrency')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('state', models.PositiveIntegerField(db_column='State')),
                ('reason', models.PositiveIntegerField(db_column='Reason')),
                ('timesetup', models.DateTimeField(db_column='TimeSetup')),
                ('timeexpiration', models.DateTimeField(db_column='TimeExpiration')),
                ('timedone', models.DateTimeField(db_column='TimeDone')),
                ('timesetupmsc', models.DateTimeField(db_column='TimeSetupMsc')),
                ('timedonemsc', models.DateTimeField(db_column='TimeDoneMsc')),
                ('modifyflags', models.PositiveIntegerField(db_column='ModifyFlags')),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('typefill', models.PositiveIntegerField(db_column='TypeFill')),
                ('typetime', models.PositiveIntegerField(db_column='TypeTime')),
                ('priceorder', models.FloatField(db_column='PriceOrder')),
                ('pricetrigger', models.FloatField(db_column='PriceTrigger')),
                ('pricecurrent', models.FloatField(db_column='PriceCurrent')),
                ('pricesl', models.FloatField(db_column='PriceSL')),
                ('pricetp', models.FloatField(db_column='PriceTP')),
                ('volumeinitialext', models.BigIntegerField(db_column='VolumeInitialExt')),
                ('volumecurrentext', models.BigIntegerField(db_column='VolumeCurrentExt')),
                ('expertid', models.BigIntegerField(db_column='ExpertID')),
                ('positionid', models.BigIntegerField(db_column='PositionID')),
                ('positionbyid', models.BigIntegerField(db_column='PositionByID')),
                ('ratemargin', models.FloatField(db_column='RateMargin')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
                ('activationmode', models.PositiveIntegerField(db_column='ActivationMode')),
                ('activationtime', models.BigIntegerField(db_column='ActivationTime')),
                ('activationprice', models.FloatField(db_column='ActivationPrice')),
                ('activationflags', models.PositiveIntegerField(db_column='ActivationFlags')),
                ('volumeinitial', models.BigIntegerField(db_column='VolumeInitial')),
                ('volumecurrent', models.BigIntegerField(db_column='VolumeCurrent')),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_orders_2019',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5OrdersHistory',
            fields=[
                ('order', models.BigIntegerField(db_column='Order', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('externalid', models.CharField(db_column='ExternalID', max_length=32)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('dealer', models.BigIntegerField(db_column='Dealer')),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('digitscurrency', models.PositiveIntegerField(db_column='DigitsCurrency')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('state', models.PositiveIntegerField(db_column='State')),
                ('reason', models.PositiveIntegerField(db_column='Reason')),
                ('timesetup', models.DateTimeField(db_column='TimeSetup')),
                ('timeexpiration', models.DateTimeField(db_column='TimeExpiration')),
                ('timedone', models.DateTimeField(db_column='TimeDone')),
                ('timesetupmsc', models.DateTimeField(db_column='TimeSetupMsc')),
                ('timedonemsc', models.DateTimeField(db_column='TimeDoneMsc')),
                ('modifyflags', models.PositiveIntegerField(db_column='ModifyFlags')),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('typefill', models.PositiveIntegerField(db_column='TypeFill')),
                ('typetime', models.PositiveIntegerField(db_column='TypeTime')),
                ('priceorder', models.FloatField(db_column='PriceOrder')),
                ('pricetrigger', models.FloatField(db_column='PriceTrigger')),
                ('pricecurrent', models.FloatField(db_column='PriceCurrent')),
                ('pricesl', models.FloatField(db_column='PriceSL')),
                ('pricetp', models.FloatField(db_column='PriceTP')),
                ('volumeinitialext', models.BigIntegerField(db_column='VolumeInitialExt')),
                ('volumecurrentext', models.BigIntegerField(db_column='VolumeCurrentExt')),
                ('expertid', models.BigIntegerField(db_column='ExpertID')),
                ('positionid', models.BigIntegerField(db_column='PositionID')),
                ('positionbyid', models.BigIntegerField(db_column='PositionByID')),
                ('ratemargin', models.FloatField(db_column='RateMargin')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
                ('activationmode', models.PositiveIntegerField(db_column='ActivationMode')),
                ('activationtime', models.BigIntegerField(db_column='ActivationTime')),
                ('activationprice', models.FloatField(db_column='ActivationPrice')),
                ('activationflags', models.PositiveIntegerField(db_column='ActivationFlags')),
                ('volumeinitial', models.BigIntegerField(db_column='VolumeInitial')),
                ('volumecurrent', models.BigIntegerField(db_column='VolumeCurrent')),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_orders_history',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5PluginParams',
            fields=[
                ('param_id', models.BigIntegerField(db_column='Param_ID', primary_key=True, serialize=False)),
                ('server', models.BigIntegerField(db_column='Server')),
                ('plugin', models.CharField(db_column='Plugin', max_length=64)),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('name', models.CharField(db_column='Name', max_length=64)),
                ('value', models.CharField(db_column='Value', max_length=256)),
            ],
            options={
                'db_table': 'mt5_plugin_params',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Plugins',
            fields=[
                ('name', models.CharField(db_column='Name', max_length=64, primary_key=True, serialize=False)),
                ('server', models.BigIntegerField(db_column='Server')),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('module', models.CharField(db_column='Module', max_length=64)),
                ('enable', models.PositiveIntegerField(db_column='Enable')),
                ('flags', models.PositiveIntegerField(db_column='Flags')),
            ],
            options={
                'db_table': 'mt5_plugins',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Positions',
            fields=[
                ('position_id', models.BigIntegerField(db_column='Position_ID', primary_key=True, serialize=False)),
                ('position', models.BigIntegerField(db_column='Position')),
                ('externalid', models.CharField(db_column='ExternalID', max_length=32)),
                ('login', models.BigIntegerField(db_column='Login')),
                ('dealer', models.BigIntegerField(db_column='Dealer')),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('action', models.PositiveIntegerField(db_column='Action')),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('digitscurrency', models.PositiveIntegerField(db_column='DigitsCurrency')),
                ('reason', models.PositiveIntegerField(db_column='Reason')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('timecreate', models.DateTimeField(db_column='TimeCreate')),
                ('timeupdate', models.DateTimeField(db_column='TimeUpdate')),
                ('timecreatemsc', models.DateTimeField(db_column='TimeCreateMsc')),
                ('timeupdatemsc', models.DateTimeField(db_column='TimeUpdateMsc')),
                ('priceopen', models.FloatField(db_column='PriceOpen')),
                ('pricecurrent', models.FloatField(db_column='PriceCurrent')),
                ('pricesl', models.FloatField(db_column='PriceSL')),
                ('pricetp', models.FloatField(db_column='PriceTP')),
                ('volumeext', models.BigIntegerField(db_column='VolumeExt')),
                ('profit', models.FloatField(db_column='Profit')),
                ('storage', models.FloatField(db_column='Storage')),
                ('rateprofit', models.FloatField(db_column='RateProfit')),
                ('ratemargin', models.FloatField(db_column='RateMargin')),
                ('expertid', models.BigIntegerField(db_column='ExpertID')),
                ('expertpositionid', models.BigIntegerField(db_column='ExpertPositionID')),
                ('comment', models.CharField(db_column='Comment', max_length=32)),
                ('activationmode', models.PositiveIntegerField(db_column='ActivationMode')),
                ('activationtime', models.BigIntegerField(db_column='ActivationTime')),
                ('activationprice', models.FloatField(db_column='ActivationPrice')),
                ('activationflags', models.PositiveIntegerField(db_column='ActivationFlags')),
                ('volume', models.BigIntegerField(db_column='Volume')),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_positions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Prices',
            fields=[
                ('price_id', models.BigIntegerField(db_column='Price_ID', primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('biddir', models.PositiveIntegerField(db_column='BidDir')),
                ('askdir', models.PositiveIntegerField(db_column='AskDir')),
                ('lastdir', models.PositiveIntegerField(db_column='LastDir')),
                ('time', models.DateTimeField(db_column='Time')),
                ('bidlast', models.FloatField(db_column='BidLast')),
                ('bidhigh', models.FloatField(db_column='BidHigh')),
                ('bidlow', models.FloatField(db_column='BidLow')),
                ('asklast', models.FloatField(db_column='AskLast')),
                ('askhigh', models.FloatField(db_column='AskHigh')),
                ('asklow', models.FloatField(db_column='AskLow')),
                ('lastlast', models.FloatField(db_column='LastLast')),
                ('lasthigh', models.FloatField(db_column='LastHigh')),
                ('lastlow', models.FloatField(db_column='LastLow')),
            ],
            options={
                'db_table': 'mt5_prices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5ReportParams',
            fields=[
                ('param_id', models.BigIntegerField(db_column='Param_ID', primary_key=True, serialize=False)),
                ('server', models.BigIntegerField(db_column='Server')),
                ('report', models.CharField(db_column='Report', max_length=64)),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('name', models.CharField(db_column='Name', max_length=64)),
                ('value', models.CharField(db_column='Value', max_length=256)),
            ],
            options={
                'db_table': 'mt5_report_params',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Reports',
            fields=[
                ('name', models.CharField(db_column='Name', max_length=64, primary_key=True, serialize=False)),
                ('server', models.BigIntegerField(db_column='Server')),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('template', models.CharField(db_column='Template', max_length=64)),
                ('enable', models.PositiveIntegerField(db_column='Enable')),
            ],
            options={
                'db_table': 'mt5_reports',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Routing',
            fields=[
                ('name', models.CharField(db_column='Name', max_length=64, primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('mode', models.PositiveIntegerField(db_column='Mode')),
                ('request', models.PositiveIntegerField(db_column='Request')),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('flags', models.PositiveIntegerField(db_column='Flags')),
                ('action', models.PositiveIntegerField(db_column='Action')),
                ('actionvaluestring', models.CharField(blank=True, db_column='ActionValueString', max_length=128, null=True)),
                ('actionvalueint', models.BigIntegerField(blank=True, db_column='ActionValueInt', null=True)),
                ('actionvalueuint', models.BigIntegerField(blank=True, db_column='ActionValueUInt', null=True)),
                ('actionvaluefloat', models.FloatField(blank=True, db_column='ActionValueFloat', null=True)),
                ('actiontype', models.PositiveIntegerField(db_column='ActionType')),
            ],
            options={
                'db_table': 'mt5_routing',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5RoutingConds',
            fields=[
                ('condition_id', models.BigIntegerField(db_column='Condition_ID', primary_key=True, serialize=False)),
                ('routingname', models.CharField(db_column='RoutingName', max_length=64)),
                ('condition', models.PositiveIntegerField(db_column='Condition')),
                ('rule', models.PositiveIntegerField(db_column='Rule')),
                ('valuestring', models.CharField(blank=True, db_column='ValueString', max_length=128, null=True)),
                ('valueint', models.BigIntegerField(blank=True, db_column='ValueInt', null=True)),
                ('valueuint', models.BigIntegerField(blank=True, db_column='ValueUInt', null=True)),
                ('valuefloat', models.FloatField(blank=True, db_column='ValueFloat', null=True)),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('valueuintext', models.BigIntegerField(blank=True, db_column='ValueUIntExt', null=True)),
            ],
            options={
                'db_table': 'mt5_routing_conds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5RoutingDealers',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('routingname', models.CharField(db_column='RoutingName', max_length=64)),
                ('name', models.CharField(db_column='Name', max_length=32)),
            ],
            options={
                'db_table': 'mt5_routing_dealers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Symbols',
            fields=[
                ('symbol_id', models.BigIntegerField(db_column='Symbol_ID', primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_column='Symbol', max_length=32)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('path', models.CharField(db_column='Path', max_length=128)),
                ('isin', models.CharField(db_column='ISIN', max_length=16)),
                ('description', models.CharField(db_column='Description', max_length=64)),
                ('international', models.CharField(db_column='International', max_length=64)),
                ('basis', models.CharField(db_column='Basis', max_length=32)),
                ('source', models.CharField(db_column='Source', max_length=32)),
                ('page', models.CharField(db_column='Page', max_length=256)),
                ('currencybase', models.CharField(db_column='CurrencyBase', max_length=16)),
                ('currencybasedigits', models.PositiveIntegerField(db_column='CurrencyBaseDigits')),
                ('currencyprofit', models.CharField(db_column='CurrencyProfit', max_length=16)),
                ('currencyprofitdigits', models.PositiveIntegerField(db_column='CurrencyProfitDigits')),
                ('currencymargin', models.CharField(db_column='CurrencyMargin', max_length=16)),
                ('currencymargindigits', models.PositiveIntegerField(db_column='CurrencyMarginDigits')),
                ('color', models.PositiveIntegerField(db_column='Color')),
                ('colorbackground', models.PositiveIntegerField(db_column='ColorBackground')),
                ('digits', models.PositiveIntegerField(db_column='Digits')),
                ('point', models.FloatField(db_column='Point')),
                ('multiply', models.FloatField(db_column='Multiply')),
                ('tickflags', models.BigIntegerField(db_column='TickFlags')),
                ('tickbookdepth', models.PositiveIntegerField(db_column='TickBookDepth')),
                ('tickchartmode', models.PositiveIntegerField(db_column='TickChartMode')),
                ('filtersoft', models.PositiveIntegerField(db_column='FilterSoft')),
                ('filtersoftticks', models.PositiveIntegerField(db_column='FilterSoftTicks')),
                ('filterhard', models.PositiveIntegerField(db_column='FilterHard')),
                ('filterhardticks', models.PositiveIntegerField(db_column='FilterHardTicks')),
                ('filterdiscard', models.PositiveIntegerField(db_column='FilterDiscard')),
                ('filterspreadmax', models.PositiveIntegerField(db_column='FilterSpreadMax')),
                ('filterspreadmin', models.PositiveIntegerField(db_column='FilterSpreadMin')),
                ('filtergap', models.PositiveIntegerField(db_column='FilterGap')),
                ('filtergapticks', models.PositiveIntegerField(db_column='FilterGapTicks')),
                ('trademode', models.PositiveIntegerField(db_column='TradeMode')),
                ('tradeflags', models.BigIntegerField(db_column='TradeFlags')),
                ('calcmode', models.PositiveIntegerField(db_column='CalcMode')),
                ('execmode', models.PositiveIntegerField(db_column='ExecMode')),
                ('gtcmode', models.PositiveIntegerField(db_column='GTCMode')),
                ('fillflags', models.PositiveIntegerField(db_column='FillFlags')),
                ('expirflags', models.PositiveIntegerField(db_column='ExpirFlags')),
                ('orderflags', models.PositiveIntegerField(db_column='OrderFlags')),
                ('spread', models.IntegerField(db_column='Spread')),
                ('spreadbalance', models.IntegerField(db_column='SpreadBalance')),
                ('spreaddiff', models.IntegerField(db_column='SpreadDiff')),
                ('spreaddiffbalance', models.IntegerField(db_column='SpreadDiffBalance')),
                ('tickvalue', models.FloatField(db_column='TickValue')),
                ('ticksize', models.FloatField(db_column='TickSize')),
                ('contractsize', models.FloatField(db_column='ContractSize')),
                ('stopslevel', models.IntegerField(db_column='StopsLevel')),
                ('freezelevel', models.IntegerField(db_column='FreezeLevel')),
                ('quotestimeout', models.PositiveIntegerField(db_column='QuotesTimeout')),
                ('volumeminext', models.BigIntegerField(db_column='VolumeMinExt')),
                ('volumemaxext', models.BigIntegerField(db_column='VolumeMaxExt')),
                ('volumestepext', models.BigIntegerField(db_column='VolumeStepExt')),
                ('volumelimitext', models.BigIntegerField(db_column='VolumeLimitExt')),
                ('marginflags', models.PositiveIntegerField(db_column='MarginFlags')),
                ('margininitial', models.FloatField(db_column='MarginInitial')),
                ('marginmaintenance', models.FloatField(db_column='MarginMaintenance')),
                ('margininitialbuy', models.FloatField(db_column='MarginInitialBuy')),
                ('margininitialsell', models.FloatField(db_column='MarginInitialSell')),
                ('margininitialbuylimit', models.FloatField(db_column='MarginInitialBuyLimit')),
                ('margininitialselllimit', models.FloatField(db_column='MarginInitialSellLimit')),
                ('margininitialbuystop', models.FloatField(db_column='MarginInitialBuyStop')),
                ('margininitialsellstop', models.FloatField(db_column='MarginInitialSellStop')),
                ('margininitialbuystoplimit', models.FloatField(db_column='MarginInitialBuyStopLimit')),
                ('margininitialsellstoplimit', models.FloatField(db_column='MarginInitialSellStopLimit')),
                ('marginmaintenancebuy', models.FloatField(db_column='MarginMaintenanceBuy')),
                ('marginmaintenancesell', models.FloatField(db_column='MarginMaintenanceSell')),
                ('marginmaintenancebuylimit', models.FloatField(db_column='MarginMaintenanceBuyLimit')),
                ('marginmaintenanceselllimit', models.FloatField(db_column='MarginMaintenanceSellLimit')),
                ('marginmaintenancebuystop', models.FloatField(db_column='MarginMaintenanceBuyStop')),
                ('marginmaintenancesellstop', models.FloatField(db_column='MarginMaintenanceSellStop')),
                ('marginmaintenancebuystoplimit', models.FloatField(db_column='MarginMaintenanceBuyStopLimit')),
                ('marginmaintenancesellstoplimit', models.FloatField(db_column='MarginMaintenanceSellStopLimit')),
                ('marginrateliquidity', models.FloatField(db_column='MarginRateLiquidity')),
                ('marginhedged', models.FloatField(db_column='MarginHedged')),
                ('marginratecurrency', models.FloatField(db_column='MarginRateCurrency')),
                ('swapmode', models.PositiveIntegerField(db_column='SwapMode')),
                ('swaplong', models.FloatField(db_column='SwapLong')),
                ('swapshort', models.FloatField(db_column='SwapShort')),
                ('swap3day', models.IntegerField(db_column='Swap3Day')),
                ('timestart', models.DateTimeField(db_column='TimeStart')),
                ('timeexpiration', models.DateTimeField(db_column='TimeExpiration')),
                ('reflags', models.PositiveIntegerField(db_column='REFlags')),
                ('retimeout', models.PositiveIntegerField(db_column='RETimeout')),
                ('iecheckmode', models.PositiveIntegerField(db_column='IECheckMode')),
                ('ietimeout', models.PositiveIntegerField(db_column='IETimeout')),
                ('ieslipprofit', models.PositiveIntegerField(db_column='IESlipProfit')),
                ('iesliplosing', models.PositiveIntegerField(db_column='IESlipLosing')),
                ('ievolumemaxext', models.BigIntegerField(db_column='IEVolumeMaxExt')),
                ('pricesettle', models.FloatField(db_column='PriceSettle')),
                ('pricelimitmax', models.FloatField(db_column='PriceLimitMax')),
                ('pricelimitmin', models.FloatField(db_column='PriceLimitMin')),
                ('pricestrike', models.FloatField(db_column='PriceStrike')),
                ('optionmode', models.PositiveIntegerField(db_column='OptionMode')),
                ('facevalue', models.FloatField(db_column='FaceValue')),
                ('accruedinterest', models.FloatField(db_column='AccruedInterest')),
                ('splicetype', models.PositiveIntegerField(db_column='SpliceType')),
                ('splicetimetype', models.PositiveIntegerField(db_column='SpliceTimeType')),
                ('splicetimedays', models.PositiveIntegerField(db_column='SpliceTimeDays')),
                ('volumemin', models.BigIntegerField(blank=True, db_column='VolumeMin', null=True)),
                ('volumemax', models.BigIntegerField(blank=True, db_column='VolumeMax', null=True)),
                ('volumestep', models.BigIntegerField(blank=True, db_column='VolumeStep', null=True)),
                ('volumelimit', models.BigIntegerField(blank=True, db_column='VolumeLimit', null=True)),
                ('ievolumemax', models.BigIntegerField(blank=True, db_column='IEVolumeMax', null=True)),
            ],
            options={
                'db_table': 'mt5_symbols',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5SymbolsSessions',
            fields=[
                ('session_id', models.BigIntegerField(db_column='Session_ID', primary_key=True, serialize=False)),
                ('symbol_id', models.BigIntegerField(db_column='Symbol_ID')),
                ('type', models.PositiveIntegerField(db_column='Type')),
                ('day', models.PositiveIntegerField(db_column='Day')),
                ('open', models.PositiveIntegerField(db_column='Open')),
                ('close', models.PositiveIntegerField(db_column='Close')),
            ],
            options={
                'db_table': 'mt5_symbols_sessions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Time',
            fields=[
                ('timezone', models.IntegerField(db_column='TimeZone', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('timeserver', models.CharField(db_column='TimeServer', max_length=128)),
                ('daylight', models.IntegerField(db_column='Daylight')),
                ('daylightstate', models.IntegerField(db_column='DaylightState')),
            ],
            options={
                'db_table': 'mt5_time',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5TimeWeekdays',
            fields=[
                ('timezone', models.IntegerField(db_column='TimeZone', primary_key=True, serialize=False)),
                ('day', models.PositiveIntegerField(db_column='Day')),
                ('number_00', models.PositiveIntegerField(db_column='00')),
                ('number_01', models.PositiveIntegerField(db_column='01')),
                ('number_02', models.PositiveIntegerField(db_column='02')),
                ('number_03', models.PositiveIntegerField(db_column='03')),
                ('number_04', models.PositiveIntegerField(db_column='04')),
                ('number_05', models.PositiveIntegerField(db_column='05')),
                ('number_06', models.PositiveIntegerField(db_column='06')),
                ('number_07', models.PositiveIntegerField(db_column='07')),
                ('number_08', models.PositiveIntegerField(db_column='08')),
                ('number_09', models.PositiveIntegerField(db_column='09')),
                ('number_10', models.PositiveIntegerField(db_column='10')),
                ('number_11', models.PositiveIntegerField(db_column='11')),
                ('number_12', models.PositiveIntegerField(db_column='12')),
                ('number_13', models.PositiveIntegerField(db_column='13')),
                ('number_14', models.PositiveIntegerField(db_column='14')),
                ('number_15', models.PositiveIntegerField(db_column='15')),
                ('number_16', models.PositiveIntegerField(db_column='16')),
                ('number_17', models.PositiveIntegerField(db_column='17')),
                ('number_18', models.PositiveIntegerField(db_column='18')),
                ('number_19', models.PositiveIntegerField(db_column='19')),
                ('number_20', models.PositiveIntegerField(db_column='20')),
                ('number_21', models.PositiveIntegerField(db_column='21')),
                ('number_22', models.PositiveIntegerField(db_column='22')),
                ('number_23', models.PositiveIntegerField(db_column='23')),
            ],
            options={
                'db_table': 'mt5_time_weekdays',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mt5Users',
            fields=[
                ('login', models.BigIntegerField(db_column='Login', primary_key=True, serialize=False)),
                ('timestamp', models.BigIntegerField(db_column='Timestamp')),
                ('group', models.CharField(db_column='Group', max_length=64)),
                ('certserialnumber', models.BigIntegerField(db_column='CertSerialNumber')),
                ('rights', models.BigIntegerField(db_column='Rights')),
                ('registration', models.DateTimeField(db_column='Registration')),
                ('lastaccess', models.DateTimeField(db_column='LastAccess')),
                ('lastpasschange', models.DateTimeField(db_column='LastPassChange')),
                ('name', models.CharField(db_column='Name', max_length=128)),
                ('company', models.CharField(db_column='Company', max_length=64)),
                ('account', models.CharField(db_column='Account', max_length=32)),
                ('country', models.CharField(db_column='Country', max_length=32)),
                ('language', models.PositiveIntegerField(db_column='Language')),
                ('clientid', models.BigIntegerField(db_column='ClientID')),
                ('city', models.CharField(db_column='City', max_length=32)),
                ('state', models.CharField(db_column='State', max_length=32)),
                ('zipcode', models.CharField(db_column='ZipCode', max_length=16)),
                ('address', models.CharField(db_column='Address', max_length=128)),
                ('phone', models.CharField(db_column='Phone', max_length=32)),
                ('email', models.CharField(db_column='Email', max_length=64)),
                ('id', models.CharField(db_column='ID', max_length=32)),
                ('status', models.CharField(db_column='Status', max_length=16)),
                ('comment', models.CharField(db_column='Comment', max_length=64)),
                ('color', models.PositiveIntegerField(db_column='Color')),
                ('phonepassword', models.CharField(db_column='PhonePassword', max_length=32)),
                ('leverage', models.PositiveIntegerField(db_column='Leverage')),
                ('agent', models.BigIntegerField(db_column='Agent')),
                ('tradeaccounts', models.CharField(db_column='TradeAccounts', max_length=128)),
                ('leadcampaign', models.CharField(db_column='LeadCampaign', max_length=32)),
                ('leadsource', models.CharField(db_column='LeadSource', max_length=32)),
                ('timestamptrade', models.BigIntegerField(db_column='TimestampTrade')),
                ('balance', models.FloatField(db_column='Balance')),
                ('credit', models.FloatField(db_column='Credit')),
                ('interestrate', models.FloatField(db_column='InterestRate')),
                ('commissiondaily', models.FloatField(db_column='CommissionDaily')),
                ('commissionmonthly', models.FloatField(db_column='CommissionMonthly')),
                ('balanceprevday', models.FloatField(db_column='BalancePrevDay')),
                ('balanceprevmonth', models.FloatField(db_column='BalancePrevMonth')),
                ('equityprevday', models.FloatField(db_column='EquityPrevDay')),
                ('equityprevmonth', models.FloatField(db_column='EquityPrevMonth')),
                ('mqid', models.CharField(db_column='MQID', max_length=16)),
                ('lastip', models.CharField(db_column='LastIP', max_length=32)),
                ('apidata', models.CharField(db_column='ApiData', max_length=4000)),
            ],
            options={
                'db_table': 'mt5_users',
                'managed': False,
            },
        ),
    ]
